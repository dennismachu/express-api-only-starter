{"version":3,"sources":["../../../../src/main/app/notes/notesController.js"],"names":["create","req","res","next","body","title","description","response","message","apiResponse","successResponseWithData","errorResponse","errors","readAll","limit","query","notes","readOne","noteID","params","id","note","notFoundResponse","update","noteData","Joi","attempt","string","min","max","required","updateNoteData","remove","then","result","successResponse","err"],"mappings":"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","sourcesContent":["/**\n * Contains app controllers.\n * The controller can thus be thought of as a middleman between models & services\n */\n\nimport {\n  createNotes,\n  viewNote,\n  viewAllNotes,\n  updateNote,\n  removeNotes,\n} from './notesService.js'\n\nimport apiResponse from '../../utility/apiResponse'\nimport Joi from 'joi'\n\n// Create\nconst create = async (req, res, next) => {\n  const {title, description} = req.body\n  try {\n    let response = await createNotes(title, description)\n    let message = 'Note created succeddfully'\n    return apiResponse.successResponseWithData(res, message, response)\n  } catch (error) {\n    return apiResponse.errorResponse(res, error.errors)\n  }\n}\n\n// Read\nconst readAll = async (req, res, next) => {\n  try {\n    const limit = req.query.limit || 10\n    const notes = await viewAllNotes(limit)\n    return apiResponse.successResponseWithData(res, notes)\n  } catch (error) {\n    return apiResponse.errorResponse(res, error.errors)\n  }\n}\n\n// Read By ID\nconst readOne = async (req, res, next) => {\n  try {\n    const noteID = req.params.id\n    const note = await viewNote(noteID)\n    if (!note) {\n      const message = 'No record found'\n      return apiResponse.notFoundResponse(res, message)\n    }\n    return apiResponse.successResponseWithData(res, note)\n  } catch (error) {\n    return apiResponse.errorResponse(res, error.errors)\n  }\n}\n// Update\nconst update = async (req, res, next) => {\n  try {\n    const noteID = req.params.id\n    const note = await viewNote(noteID)\n    if (!note) {\n      const message = 'No record found'\n      return apiResponse.notFoundResponse(res, message)\n    }\n    const noteData = {\n      title: Joi.attempt(\n        req.body.title,\n        Joi.string().min(3).max(30).required(),\n        'Title Error:',\n      ),\n      description: Joi.attempt(\n        req.body.description,\n        Joi.string(),\n        'Description Error:',\n      ),\n    }\n\n    const updateNoteData = await updateNote(noteID, noteData)\n\n    return apiResponse.successResponseWithData(res, updateNoteData)\n  } catch (error) {\n    return apiResponse.errorResponse(res, error.message)\n  }\n}\n// Delete\nconst remove = async (req, res, next) => {\n  try {\n    const note = await viewNote(req.params.id)\n    if (!note) {\n      const message = 'Note not found'\n      return apiResponse.notFoundResponse(res, message)\n    }\n    await removeNotes(req.params.id)\n      .then(result => {\n        const message = 'Note Deleted'\n        return apiResponse.successResponse(res, message)\n      })\n      .catch(err => {\n        return apiResponse.errorResponse(res, err.errors)\n      })\n  } catch (error) {\n    return apiResponse.errorResponse(res, error.errors)\n  }\n}\n\nexport {create, readAll, update, remove, readOne}\n"],"file":"notesController.js"}