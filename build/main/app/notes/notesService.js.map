{"version":3,"sources":["../../../../src/main/app/notes/notesService.js"],"names":["createNotes","title","description","note","Notes","logger","info","save","viewNote","id","findById","toString","noteData","viewAllNotes","limit","options","page","sort","paginate","err","result","Error","notesData","updateNote","console","log","findByIdAndUpdate","$set","removeNotes","findByIdAndRemove","module","exports"],"mappings":";;;;;;;;AAKA;;AACA;;AANA;AACA;AACA;AACA;AACA;AAGA;AACA,IAAMA,WAAW;AAAA,2FAAG,iBAAOC,KAAP,EAAcC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAClB;AACIC,YAAAA,IAFc,GAEP,IAAIC,sBAAJ,CAAU;AACnBH,cAAAA,KAAK,EAAEA,KADY;AAEnBC,cAAAA,WAAW,EAAEA;AAFM,aAAV,CAFO;;AAMlBG,8BAAOC,IAAP;;AANkB;AAAA,mBAOLH,IAAI,CAACI,IAAL,EAPK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXP,WAAW;AAAA;AAAA;AAAA,GAAjB,C,CAUA;;;AACA,IAAMQ,QAAQ;AAAA,4FAAG,kBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQL,uBAAMM,QAAN,CAAeD,EAAE,CAACE,QAAH,EAAf,CADR;;AAAA;AACTC,YAAAA,QADS;AAAA,8CAERA,QAFQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARJ,QAAQ;AAAA;AAAA;AAAA,GAAd,C,CAKA;;;AACA,IAAMK,YAAY;AAAA,4FAAG,kBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,OADa,GACH;AACdC,cAAAA,IAAI,EAAE,CADQ;AAEdF,cAAAA,KAAK,EAAEA,KAFO;AAGdG,cAAAA,IAAI,EAAE;AAHQ,aADG;AAAA;AAAA,mBAMKb,uBAAMc,QAAN,CAAe,EAAf,EAAmBH,OAAnB,EAA4B,UAACI,GAAD,EAAMC,MAAN,EAAiB;AACnE,kBAAID,GAAJ,EAAS;AACP,sBAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACD;;AACD,qBAAOC,MAAP;AACD,aALuB,CANL;;AAAA;AAMbE,YAAAA,SANa;AAAA,8CAYZA,SAZY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZT,YAAY;AAAA;AAAA;AAAA,GAAlB,C,CAeA;;;AACA,IAAMU,UAAU;AAAA,4FAAG,kBAAOd,EAAP,EAAWa,SAAX;AAAA;AAAA;AAAA;AAAA;AACjBE,YAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AADiB;AAAA,mBAEJlB,uBAAMsB,iBAAN,CAAwBjB,EAAxB,EAA4B;AAACkB,cAAAA,IAAI,EAAEL;AAAP,aAA5B,CAFI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVC,UAAU;AAAA;AAAA;AAAA,GAAhB,C,CAKA;;;AACA,IAAMK,WAAW;AAAA,4FAAG,kBAAMnB,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACLL,uBAAMyB,iBAAN,CAAwBpB,EAAxB,CADK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXmB,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAGAE,MAAM,CAACC,OAAP,GAAiB;AACf/B,EAAAA,WAAW,EAAXA,WADe;AAEfQ,EAAAA,QAAQ,EAARA,QAFe;AAGfK,EAAAA,YAAY,EAAZA,YAHe;AAIfU,EAAAA,UAAU,EAAVA,UAJe;AAKfK,EAAAA,WAAW,EAAXA;AALe,CAAjB","sourcesContent":["/**\n * Contains module(notes) services.\n * A service object implements the userâ€™s interactions with the application.\n * It contains business logic that describe the connections with your domain objects.\n */\nimport Notes from './notesModel.js'\nimport logger from '../../logger/index'\n// Create\nconst createNotes = async (title, description) => {\n  // Create an user object\n  let note = new Notes({\n    title: title,\n    description: description,\n  })\n  logger.info()\n  return await note.save()\n}\n\n// Read\nconst viewNote = async id => {\n  const noteData = await Notes.findById(id.toString())\n  return noteData\n}\n\n// Read\nconst viewAllNotes = async limit => {\n  const options = {\n    page: 1,\n    limit: limit,\n    sort: '-createdAt',\n  }\n  const notesData = await Notes.paginate({}, options, (err, result) => {\n    if (err) {\n      throw new Error(err)\n    }\n    return result\n  })\n  return notesData\n}\n\n// Update\nconst updateNote = async (id, notesData) => {\n  console.log(notesData)\n  return await Notes.findByIdAndUpdate(id, {$set: notesData})\n}\n\n// Delete\nconst removeNotes = async id => {\n  return await Notes.findByIdAndRemove(id)\n}\nmodule.exports = {\n  createNotes,\n  viewNote,\n  viewAllNotes,\n  updateNote,\n  removeNotes,\n}\n"],"file":"notesService.js"}